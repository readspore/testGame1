using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;

public static class Invulnerability
{
    static bool isActive = false;
    static int maxLvl = 3;

    static int SilverCostLvl1 = 100;
    static int SilverCostLvl2 = 200;
    static int SilverCostLvl3 = 300;

    static int GoldCostLvl1 = 10;
    static int GoldCostLvl2 = 20;
    static int GoldCostLvl3 = 30;

    static int timeApplayedLvl1 = 3;
    static int timeApplayedLvl2 = 6;
    static int timeApplayedLvl3 = 10;

    public static int CurrentLvl
    {
        get
        {
            return PlayerPrefs.GetInt("Invulnerability");
        }
    }

    public static int CurrentLvlActiveTime
    {
        get
        {
            var time = 0;
            switch (CurrentLvl)
            {
                case 1:
                    time = timeApplayedLvl1;
                    break;
                case 2:
                    time = timeApplayedLvl2;
                    break;
                case 3:
                    time = timeApplayedLvl3;
                    break;
            }
            return time;
        }
    }

    public static int CurrentLvlSilverCost
    {
        get
        {
            int cost = 0;
            switch (CurrentLvl)
            {
                case 0:
                    cost = SilverCostLvl1;
                    break;
                case 1:
                    cost = SilverCostLvl2;
                    break;
                case 2:
                    cost = SilverCostLvl3;
                    break;
            }
            return cost;
        }
    }

    public static int CurrentLvlGoldCost
    {
        get
        {
            var curLvl = CurrentLvl;
            int cost = 0;
            switch (curLvl)
            {
                case 0:
                    cost = GoldCostLvl1;
                    break;
                case 1:
                    cost = GoldCostLvl2;
                    break;
                case 2:
                    cost = GoldCostLvl3;
                    break;
            }
            return cost;
        }
    }

    public static bool IsActive { get => isActive; private set => isActive = value; }

    public static bool Activate()
    {
        if (IsActive)
            return false;
        IsActive = true;
        //Debug.Log("Active");
        //Task.Delay(CurrentLvlActiveTime).ContinueWith(t => DeActivate());
        Transform.FindObjectOfType<Player>().invalnerable.SetActive(true);
        return true;
    }

    public static void DeActivate()
    {
        //yield return new WaitForSeconds(CurrentLvlActiveTime);
        IsActive = false;
        Transform.FindObjectOfType<Player>().invalnerable.SetActive(false);
        //Debug.Log("DeActivate");
    }

    public static int TakeDamage(int damage)
    {
        if (IsActive)
            damage = 0;
        return damage;
    }

    public static bool TryUpgradeInvulnerability(Currency currency)
    {
        if (
            (
                currency == Currency.Gold
                &&
                Bank.AccountContain(currency, CurrentLvlGoldCost)
            )
            ||
            (
                currency == Currency.Silver
                &&
                Bank.AccountContain(currency, CurrentLvlSilverCost)
            )
        )
        {
            var curLvl = PlayerPrefs.GetInt("Invulnerability");
            if (curLvl == maxLvl)
                return false;
            PlayerPrefs.SetInt("Invulnerability", curLvl + 1);
            return true;
        }
        else
        {

            return false;
        }
    }
}
